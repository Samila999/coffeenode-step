// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  this.indexed = function(stepper, handler) {
    var idx;
    idx = -1;
    stepper((function(_this) {
      return function() {
        var error, first, rest;
        error = arguments[0], first = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (error != null) {
          return handler(error);
        }
        idx = first === null ? null : idx + 1;
        return handler.apply(null, [null, idx, first].concat(__slice.call(rest)));
      };
    })(this));
    return null;
  };

  this.reversed = function(stepper, handler) {
    var buffer;
    buffer = [];
    stepper((function(_this) {
      return function() {
        var error, first, idx, rest, _i, _ref;
        error = arguments[0], first = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (error != null) {
          return handler(error);
        }
        if (first === null) {
          for (idx = _i = _ref = buffer.length - 1; _i >= 0; idx = _i += -1) {
            handler.apply(null, [null].concat(__slice.call(buffer[idx])));
          }
          return handler.apply(null, [null, first].concat(__slice.call(rest)));
        }
        return buffer.push([first].concat(__slice.call(rest)));
      };
    })(this));
    return null;
  };

  this.triplets = function(stepper, handler) {
    var buffer, empty, idx, rotate;
    empty = this.triplets.empty;
    buffer = [empty, empty, empty];
    idx = -2;
    rotate = (function(_this) {
      return function(x) {
        buffer.push(x);
        return buffer.shift();
      };
    })(this);
    stepper((function(_this) {
      return function() {
        var error, first, rest;
        error = arguments[0], first = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (error != null) {
          return handler(error);
        }
        idx += 1;
        if (first === null) {
          rotate(empty);
          if (buffer[1] != null) {
            handler.apply(null, [null].concat(__slice.call(buffer)));
          }
          return handler(null, null);
        }
        rotate(rest.length === 0 ? first : [first].concat(__slice.call(rest)));
        if (idx < 0) {
          return;
        }
        return handler.apply(null, [null].concat(__slice.call(buffer)));
      };
    })(this));
    return null;
  };

  this.triplets.empty = {
    empty: true
  };

  this.collected = function(stepper, handler) {
    var buffer;
    buffer = [];
    stepper((function(_this) {
      return function() {
        var error, first, rest;
        error = arguments[0], first = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (error != null) {
          return handler(error);
        }
        if (first === null) {
          return handler(null, buffer);
        }
        return buffer.push([first].concat(__slice.call(rest)));
      };
    })(this));
    return null;
  };

  this.interleaved = function(stepper, joiner, handler) {
    this.triplets(stepper, (function(_this) {
      return function(error, last_value, this_value, next_value) {
        if (error != null) {
          return handler(error);
        }
        whisper(last_value, this_value, next_value);
        handler(null, this_value);
        if (next_value !== _this.triplets.empty) {
          return handler(null, joiner);
        }
      };
    })(this));
    return null;
  };

  this.fenced = function(stepper, opener, closer, handler) {
    var is_first_call;
    is_first_call = true;
    stepper((function(_this) {
      return function() {
        var error, first, rest;
        error = arguments[0], first = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
        if (error != null) {
          return handler(error);
        }
        if (is_first_call) {
          if (opener != null) {
            handler(null, opener);
          }
          is_first_call = null;
        }
        if (first === null) {
          if (closer != null) {
            handler(null, closer);
          }
          return handler.apply(null, [null, first].concat(__slice.call(rest)));
        }
        return handler.apply(null, [null, first].concat(__slice.call(rest)));
      };
    })(this));
    return null;
  };

  this.tabled = function(stepper, handler) {
    var Table;
    Table = require('easy-table');
    this.collected(stepper, (function(_this) {
      return function(error, rows) {
        var pod, row, row_idx, value, value_idx, _i, _j, _len, _len1;
        if (error != null) {
          return handler(error);
        }
        for (row_idx = _i = 0, _len = rows.length; _i < _len; row_idx = ++_i) {
          row = rows[row_idx];
          rows[row_idx] = pod = {};
          for (value_idx = _j = 0, _len1 = row.length; _j < _len1; value_idx = ++_j) {
            value = row[value_idx];
            pod[value_idx] = rpr(value);
          }
        }
        return handler(null, '\n' + Table.printArray(rows));
      };
    })(this));
    return null;
  };

}).call(this);
