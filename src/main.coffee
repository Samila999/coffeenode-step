

#-----------------------------------------------------------------------------------------------------------
@indexed = ( stepper, handler ) ->
  idx = -1
  #---------------------------------------------------------------------------------------------------------
  stepper ( error, first, rest... ) =>
    return handler error if error?
    idx = if first is null then null else idx + 1
    handler null, idx, first, rest...
  #---------------------------------------------------------------------------------------------------------
  return null

#-----------------------------------------------------------------------------------------------------------
@reversed = ( stepper, handler ) ->
  buffer = []
  #---------------------------------------------------------------------------------------------------------
  stepper ( error, first, rest... ) =>
    return handler error if error?
    #.......................................................................................................
    if first is null
      handler null, buffer[ idx ]... for idx in [ buffer.length - 1 .. 0 ] by -1
      return handler null, first, rest...
    #.......................................................................................................
    buffer.push [ first, rest... ]
  #---------------------------------------------------------------------------------------------------------
  return null

#-----------------------------------------------------------------------------------------------------------
@triplets = ( stepper, handler ) ->
  empty   = @triplets.empty
  buffer  = [ empty, empty, empty, ]
  idx     = -2
  #---------------------------------------------------------------------------------------------------------
  rotate = ( x ) =>
    buffer.push x
    return buffer.shift()
  #---------------------------------------------------------------------------------------------------------
  stepper ( error, first, rest... ) =>
    return handler error if error?
    idx += 1
    #.......................................................................................................
    if first is null
      rotate empty
      handler null, buffer... if buffer[ 1 ]?
      return handler null, null
    #.......................................................................................................
    rotate if rest.length is 0 then first else [ first, rest... ]
    return if idx < 0
    handler null, buffer...
  #---------------------------------------------------------------------------------------------------------
  return null
#-----------------------------------------------------------------------------------------------------------
@triplets.empty = empty: true

#-----------------------------------------------------------------------------------------------------------
@collected = ( stepper, handler ) ->
  buffer = []
  #---------------------------------------------------------------------------------------------------------
  stepper ( error, first, rest... ) =>
    return handler error if error?
    return handler null, buffer if first is null
    buffer.push [ first, rest... ]
  #---------------------------------------------------------------------------------------------------------
  return null

#-----------------------------------------------------------------------------------------------------------
@interleaved = ( stepper, joiner, handler ) ->
  #---------------------------------------------------------------------------------------------------------
  @triplets stepper, ( error, last_value, this_value, next_value ) =>
    return handler error if error?
    whisper last_value, this_value, next_value
    handler null, this_value
    handler null, joiner unless next_value is @triplets.empty
  #---------------------------------------------------------------------------------------------------------
  return null

#-----------------------------------------------------------------------------------------------------------
@fenced = ( stepper, opener, closer, handler ) ->
  is_first_call = yes
  #---------------------------------------------------------------------------------------------------------
  stepper ( error, first, rest... ) =>
    return handler error if error?
    #.......................................................................................................
    if is_first_call
      handler null, opener if opener?
      is_first_call = null
    #.......................................................................................................
    if first is null
      handler null, closer if closer?
      return handler null, first, rest...
    #.......................................................................................................
    handler null, first, rest...
  #---------------------------------------------------------------------------------------------------------
  return null

#-----------------------------------------------------------------------------------------------------------
@tabled = ( stepper, handler ) ->
  Table = require 'easy-table'
  # table = new ( require 'easy-table' )
  #---------------------------------------------------------------------------------------------------------
  @collected stepper, ( error, rows ) =>
    return handler error if error?
    # whisper '###', rows
    # info '\n' + Table.printArray [ {'a': 1 }, { b: 2}]
    for row, row_idx in rows
      rows[ row_idx ] = pod = {}
      for value, value_idx in row
        pod[ value_idx ] = rpr value
    handler null, '\n' + Table.printArray rows
  #---------------------------------------------------------------------------------------------------------
  return null
